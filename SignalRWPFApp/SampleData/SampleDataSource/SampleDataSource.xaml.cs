//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.

using System.Linq;
using System.Threading;
using Microsoft.AspNet.SignalR.Client;
using SignalRWPFApp;

namespace Expression.Blend.SampleData.SampleDataSource
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class SampleDataSource { }
#else

    public class SampleDataSource : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public SampleDataSource()
        {
            try
            {
                Uri resourceUri = new Uri("/SignalRWPFApp;component/SampleData/SampleDataSource/SampleDataSource.xaml", UriKind.RelativeOrAbsolute);
                System.Windows.Application.LoadComponent(this, resourceUri);

                ////Set connection
                //var connection = new HubConnection("http://localhost:60599/");
                ////Make proxy to hub based on hub name on server
                //var myHub = connection.CreateHubProxy("RealTimeHub");
                ////Start connection


                _Collection = new ItemCollection
                {
                    new Item
                    {
                        SettingsName = "BidRecommendationService",
                        SettingsValue = "{IsStacked=False}"
                    }
                };

                //myHub.On<string>("addMessage", param => {
                //    //Console.WriteLine(param);

                //    param = param.Replace("Server:", "");

                //    var keyValue = param.Split(':');
                    
                //    var findIndex = _Collection.ToList().FindIndex(v => v.SettingsName == keyValue[0]);

                //    if (findIndex > -1)
                //    {
                //        App.Current.Dispatcher.Invoke((Action)delegate // <--- HERE
                //        {
                //            var item = _Collection.ElementAt(findIndex).SettingsValue = keyValue[1];
                //            _Collection.RemoveAt(findIndex);
                //            _Collection.Insert(findIndex, new Item
                //            {
                //                SettingsName = keyValue[1],
                //                SettingsValue = keyValue[2]
                //            });
                //        });

                     
                //    }
                //    else if(findIndex == -1 && param.Contains(':'))
                //    {
                //        App.Current.Dispatcher.Invoke((Action) delegate // <--- HERE
                //        {
                //            _Collection.Add(new Item
                //            {
                //                SettingsName = keyValue[0],
                //                SettingsValue = keyValue[1]
                //            });
                //        });
                //    }
                //    else
                //    {
                //        this.DynamicText += param + Environment.NewLine;
                //    }

                //    //setting.
                //});

                //var isConnected = false;

                //while (!isConnected)
                //{
                //    connection.Start().ContinueWith(task =>
                //    {
                //        if (task.IsFaulted)
                //        {
                //            Console.WriteLine("There was an error opening the connection:{0}",
                //                task.Exception.GetBaseException());
                //            _connectionStatus = "There was an error opening the connection";
                //            Thread.Sleep(2000);
                //        }
                //        else
                //        {
                //            isConnected = true;
                //            _connectionStatus = "Connected!";
                //        }

                //    }).Wait();
                //}
            }
            catch
            {
            }
        }

        private ItemCollection _Collection = new ItemCollection();

        public ItemCollection Collection
        {
            get
            {
                return this._Collection;
            }
        }

        private string _connectionStatus = "Connecting...";

        public string ConnectionStatus
        {
            get
            {
                return this._connectionStatus;
            }

            set
            {
                if (this._connectionStatus != value)
                {
                    this._connectionStatus = value;
                    this.OnPropertyChanged("ConnectionStatus");
                }
            }
        }

        private string _dynamicText = string.Empty;

        public string DynamicText
        {
            get
            {
                return this._dynamicText;
            }

            set
            {
                if (this._dynamicText != value)
                {
                    this._dynamicText = value;
                    this.OnPropertyChanged("DynamicText");
                }
            }
        }

    }

    public class Item : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _SettingsName = string.Empty;

        public string SettingsName
        {
            get
            {
                return this._SettingsName;
            }

            set
            {
                if (this._SettingsName != value)
                {
                    this._SettingsName = value;
                    this.OnPropertyChanged("SettingsName");
                }
            }
        }

        private string _SettingsValue = string.Empty;

        public string SettingsValue
        {
            get
            {
                return this._SettingsValue;
            }

            set
            {
                if (this._SettingsValue != value)
                {
                    this._SettingsValue = value;
                    this.OnPropertyChanged("SettingsValue");
                }
            }
        }
    }

    public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
    { 
    }
#endif
}
